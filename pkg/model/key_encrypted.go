// Auto-generated by gen/encrypted_models/main.go
package model

import (
	"fmt"

	"gorm.io/gorm"

	"conjur-in-go/pkg/slosilo"
)

func (s *Key) BeforeCreate(tx *gorm.DB) error {
	encrypt := s.getCipherForDb(tx).Encrypt

	plainKey := s.Key
	encryptedKey, err := encrypt([]byte(s.Id), plainKey)
	if err != nil {
		return fmt.Errorf("Key encryption failed for Id=%q", s.Id)
	}
	s.Key = encryptedKey

	return nil
}

func (s *Key) AfterFind(tx *gorm.DB) error {
	decrypt := s.getCipherForDb(tx).Decrypt

	encryptedKey := s.Key
	plainKey, err := decrypt([]byte(s.Id), encryptedKey)
	if err != nil {
		return fmt.Errorf("Key decryption failed for Id=%q", s.Id)
	}
	s.Key = plainKey

	return nil
}

func (s *Key) AfterCreate(tx *gorm.DB) error {
	decrypt := s.getCipherForDb(tx).Decrypt

	encryptedKey := s.Key
	plainKey, err := decrypt([]byte(s.Id), encryptedKey)
	if err != nil {
		return fmt.Errorf("Key decryption failed for Id=%q", s.Id)
	}
	s.Key = plainKey

	return nil
}

func (s *Key) getCipherForDb(tx *gorm.DB) slosilo.SymmetricCipher {
	cipher, ok := tx.Statement.Context.Value("cipher").(slosilo.SymmetricCipher)
	if !ok || cipher == nil {
		panic("no cipher in database context")
	}

	return cipher
}
